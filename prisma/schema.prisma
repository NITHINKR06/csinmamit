// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?
  branch        String?
  year          Int?
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  role          String?   @default("user")
  bio           String?   @db.Text
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  github        String    @default("/")
  linkedin      String?   @default("/")
  sessions      Session[]

  Team Team[] @relation("UserTeam")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Core {
  id String @id @default(cuid())

  name     String
  email    String?
  branch   String
  position String
  linkedin String?
  github   String?
  imageSrc String

  year  Int
  order Int
}

model Event {
  id String @id @default(cuid())

  title       String
  description String?
  brief       String?
  image       String
  date        DateTime
  time        String?
  venue       String?

  qr       String?
  entryFee Int?          @default(0)
  category EventCategory // when the event is happening
  type     EventType // solo or team

  minTeamSize Int  @default(1)
  maxTeamSize Int  @default(1)
  maxTeams    Int?

  participants Team[]
  guests       String[]

  published              Boolean @default(false)
  registrationsAvailable Boolean @default(true)
}

model Team {
  id String @id @default(cuid())
  custid      String    @unique
  email       String    @unique

  name          String?
  leaderId      String?
  transactionId String?
  eventId       String?

  branch      String
  role        String
  linkedin    String?
  github      String?
  imageLink   String?

  user     User[]     @relation("UserTeam")
  event    Event?      @relation(fields: [eventId], references: [id])
  position WinnerType? @default(TO_BE_DETERMINED)

  attended    Boolean? @default(false)
  isConfirmed Boolean? @default(false)
}



enum EventType {
  SOLO
  TEAM
}

enum EventCategory {
  PREVIOUS
  UPCOMING
  CURRENT
}

model Recruit {
  id String @id @default(cuid())

  name            String
  dateOfBirth     DateTime
  usn             String
  yearOfStudy     String
  branch          String
  mobileNumber    String
  personalEmail   String
  collegeEmail    String?
  membershipPlan  String
  csiIdea         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WinnerType {
  FIRST
  SECOND
  THIRD
  PARTICIPATION
  TO_BE_DETERMINED
}